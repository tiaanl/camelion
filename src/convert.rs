//! Implementations on all the models that has conversions to other models.

use crate::{
    color::{Color, Components, Space},
    models::{
        A98Rgb, A98RgbLinear, DisplayP3, DisplayP3Linear, Hsl, Hwb, Lab, Lch, Model, Oklab, Oklch,
        ProPhotoRgb, ProPhotoRgbLinear, Rec2020, Rec2020Linear, Srgb, SrgbLinear, ToXyz, XyzD50,
        XyzD65, D50, D65,
    },
};

impl Color {
    /// Convert this color from its current color space/notation to the
    /// specified color space/notation.
    pub fn to_space(&self, space: Space) -> Self {
        use Space as S;

        if self.space == space {
            return self.clone();
        }

        // Handle direct conversions.
        match (self.space, space) {
            (S::Srgb, S::SrgbLinear) => {
                return self
                    .as_model::<Srgb>()
                    .to_linear_light()
                    .to_color(self.alpha)
            }
            (S::SrgbLinear, S::Srgb) => {
                return self
                    .as_model::<SrgbLinear>()
                    .to_gamma_encoded()
                    .to_color(self.alpha)
            }
            (S::Srgb, S::Hsl) => return self.as_model::<Srgb>().to_hsl().to_color(self.alpha),
            (S::Hsl, S::Srgb) => return self.as_model::<Hsl>().to_srgb().to_color(self.alpha),
            (S::Srgb, S::Hwb) => return self.as_model::<Srgb>().to_hwb().to_color(self.alpha),
            (S::Hwb, S::Srgb) => return self.as_model::<Hwb>().to_srgb().to_color(self.alpha),
            (S::XyzD50, S::XyzD65) => {
                return self
                    .as_model::<XyzD50>()
                    .transfer::<D65>()
                    .to_color(self.alpha);
            }
            (S::XyzD65, S::XyzD50) => {
                return self
                    .as_model::<XyzD65>()
                    .transfer::<D50>()
                    .to_color(self.alpha)
            }
            (S::Hsl, S::Hwb) => {
                return self
                    .as_model::<Hsl>()
                    .to_srgb()
                    .to_hwb()
                    .to_color(self.alpha)
            }
            (S::Hwb, S::Hsl) => {
                return self
                    .as_model::<Hwb>()
                    .to_srgb()
                    .to_hsl()
                    .to_color(self.alpha)
            }
            _ => {}
        }

        // The rest converts to XyzD50.
        let xyz: XyzD50 = match self.space {
            S::Srgb => self
                .as_model::<Srgb>()
                .to_linear_light()
                .to_xyz()
                .transfer(),
            S::SrgbLinear => self.as_model::<SrgbLinear>().to_xyz().transfer(),
            S::Hsl => self
                .as_model::<Hsl>()
                .to_srgb()
                .to_linear_light()
                .to_xyz()
                .transfer(),
            S::Hwb => self
                .as_model::<Hwb>()
                .to_srgb()
                .to_linear_light()
                .to_xyz()
                .transfer(),
            S::Lab => self.as_model::<Lab>().to_xyz(),
            S::Lch => self.as_model::<Lch>().to_rectangular().to_xyz(),
            S::Oklab => self.as_model::<Oklab>().to_xyz().transfer(),
            S::Oklch => self
                .as_model::<Oklch>()
                .to_rectangular()
                .to_xyz()
                .transfer(),
            S::XyzD50 => self.as_model::<XyzD50>().clone(),
            S::XyzD65 => self.as_model::<XyzD65>().transfer(),
            S::DisplayP3 => self
                .as_model::<DisplayP3>()
                .to_linear_light()
                .to_xyz()
                .transfer(),
            S::A98Rgb => self
                .as_model::<A98Rgb>()
                .to_linear_light()
                .to_xyz()
                .transfer(),
            S::ProPhotoRgb => self.as_model::<ProPhotoRgb>().to_linear_light().to_xyz(),
            S::Rec2020 => self
                .as_model::<Rec2020>()
                .to_linear_light()
                .to_xyz()
                .transfer(),
        };

        match space {
            S::Srgb => SrgbLinear::from(xyz.transfer())
                .to_gamma_encoded()
                .to_color(self.alpha),
            S::SrgbLinear => SrgbLinear::from(xyz.transfer()).to_color(self.alpha),
            S::Hsl => SrgbLinear::from(xyz.transfer())
                .to_gamma_encoded()
                .to_hsl()
                .to_color(self.alpha),
            S::Hwb => SrgbLinear::from(xyz.transfer())
                .to_gamma_encoded()
                .to_hwb()
                .to_color(self.alpha),
            S::Lab => Lab::from(xyz).to_color(self.alpha),
            S::Lch => Lab::from(xyz).to_polar().to_color(self.alpha),
            S::Oklab => Oklab::from(xyz.transfer()).to_color(self.alpha),
            S::Oklch => Oklab::from(xyz.transfer()).to_polar().to_color(self.alpha),
            S::DisplayP3 => DisplayP3Linear::from(xyz.transfer())
                .to_gamma_encoded()
                .to_color(self.alpha),
            S::A98Rgb => A98RgbLinear::from(xyz.transfer())
                .to_gamma_encoded()
                .to_color(self.alpha),
            S::ProPhotoRgb => ProPhotoRgbLinear::from(xyz)
                .to_gamma_encoded()
                .to_color(self.alpha),
            S::Rec2020 => Rec2020Linear::from(xyz.transfer())
                .to_gamma_encoded()
                .to_color(self.alpha),
            S::XyzD50 => xyz.to_color(self.alpha),
            S::XyzD65 => xyz.transfer::<D65>().to_color(self.alpha),
        }
    }
}

impl Srgb {
    /// Convert a color specified in the sRGB color space to the HSL notation.
    pub fn to_hsl(&self) -> Hsl {
        util::rgb_to_hsl(&Components(self.red, self.green, self.blue)).into()
    }

    /// Convert a color specified in the sRGB color space to the HWB notation.
    pub fn to_hwb(&self) -> Hwb {
        util::rgb_to_hwb(&Components(self.red, self.green, self.blue)).into()
    }
}

impl Hsl {
    /// Convert this color from the HSL notation to the sRGB color space.
    pub fn to_srgb(&self) -> Srgb {
        util::hsl_to_rgb(&Components(self.hue, self.saturation, self.lightness)).into()
    }
}

impl Hwb {
    /// Convert this color from the HWB notation to the sRGB color space.
    pub fn to_srgb(&self) -> Srgb {
        util::hwb_to_rgb(&Components(self.hue, self.whiteness, self.blackness)).into()
    }
}

// impl XyzD50 {
//     /// Convert this model from CIE-XYZ with a D50 white point to a D65 white
//     /// point.
//     pub fn to_xyz_d65(&self) -> XyzD65 {
//         #[rustfmt::skip]
//         #[allow(clippy::excessive_precision)]
//         const MAT: Transform = transform_3x3(
//              0.9554734527042182,   -0.028369706963208136,  0.012314001688319899,
//             -0.023098536874261423,  1.0099954580058226,   -0.020507696433477912,
//              0.0632593086610217,    0.021041398966943008,  1.3303659366080753,
//         );

//         transform(&MAT, Components(self.x, self.y, self.z)).into()
//     }
// }

// impl XyzD65 {
//     /// Convert this model from CIE-XYZ with a D65 white point to a D50 white
//     /// point.
//     pub fn to_xyz_d50(&self) -> XyzD50 {
//         #[rustfmt::skip]
//         #[allow(clippy::excessive_precision)]
//         const MAT: Transform = transform_3x3(
//              1.0479298208405488,    0.029627815688159344, -0.009243058152591178,
//              0.022946793341019088,  0.990434484573249,     0.015055144896577895,
//             -0.05019222954313557,  -0.01707382502938514,   0.7518742899580008,
//         );

//         transform(&MAT, Components(self.x, self.y, self.z)).into()
//     }
// }

mod util {
    use crate::color::{Component, Components};

    /// Calculate the hue from RGB components and return it along with the min
    /// and max RGB values.
    fn rgb_to_hue_min_max(from: &Components) -> (Component, Component, Component) {
        let Components(red, green, blue) = *from;

        let max = red.max(green).max(blue);
        let min = red.min(green).min(blue);

        let delta = max - min;

        let hue = if delta != 0.0 {
            60.0 * if max == red {
                (green - blue) / delta + if green < blue { 6.0 } else { 0.0 }
            } else if max == green {
                (blue - red) / delta + 2.0
            } else {
                (red - green) / delta + 4.0
            }
        } else {
            Component::NAN
        };

        (hue, min, max)
    }

    /// Convert from RGB notation to HSL notation.
    /// <https://drafts.csswg.org/css-color-4/#rgb-to-hsl>
    pub fn rgb_to_hsl(from: &Components) -> Components {
        let (hue, min, max) = rgb_to_hue_min_max(from);

        let lightness = (min + max) / 2.0;
        let delta = max - min;

        let saturation = if delta != 0.0 {
            if lightness == 0.0 || lightness == 1.0 {
                0.0
            } else {
                (max - lightness) / lightness.min(1.0 - lightness)
            }
        } else {
            0.0
        };

        Components(hue, saturation, lightness)
    }

    /// Convert from HSL notation to RGB notation.
    /// <https://drafts.csswg.org/css-color-4/#hsl-to-rgb>
    pub fn hsl_to_rgb(from: &Components) -> Components {
        fn hue_to_rgb(t1: Component, t2: Component, hue: Component) -> Component {
            let hue = hue.rem_euclid(360.0);

            if hue * 6.0 < 360.0 {
                t1 + (t2 - t1) * hue / 60.0
            } else if hue * 2.0 < 360.0 {
                t2
            } else if hue * 3.0 < 720.0 {
                t1 + (t2 - t1) * (240.0 - hue) / 60.0
            } else {
                t1
            }
        }

        let Components(hue, saturation, lightness) = *from;

        let t2 = if lightness <= 0.5 {
            lightness * (saturation + 1.0)
        } else {
            lightness + saturation - lightness * saturation
        };
        let t1 = lightness * 2.0 - t2;

        Components(
            hue_to_rgb(t1, t2, hue + 120.0),
            hue_to_rgb(t1, t2, hue),
            hue_to_rgb(t1, t2, hue - 120.0),
        )
    }

    /// Convert from RGB notation to HWB notation.
    /// <https://drafts.csswg.org/css-color-4/#rgb-to-hwb>
    pub fn rgb_to_hwb(from: &Components) -> Components {
        let (hue, min, max) = rgb_to_hue_min_max(from);

        let whiteness = min;
        let blackness = 1.0 - max;

        Components(hue, whiteness, blackness)
    }

    /// Convert from HWB notation to RGB notation.
    /// <https://drafts.csswg.org/css-color-4/#hwb-to-rgb>
    pub fn hwb_to_rgb(from: &Components) -> Components {
        let Components(hue, whiteness, blackness) = *from;

        if whiteness + blackness > 1.0 {
            let gray = whiteness / (whiteness + blackness);
            return Components(gray, gray, gray);
        }

        let x = 1.0 - whiteness - blackness;
        hsl_to_rgb(&Components(hue, 1.0, 0.5)).map(|v| v * x + whiteness)
    }
}

#[cfg(test)]
mod tests {
    use crate::color::{Color, Component, Space};

    #[test]
    fn test_conversions() {
        use Space as S;

        #[rustfmt::skip]
        #[allow(clippy::excessive_precision)]
        #[allow(clippy::type_complexity)]
        const TESTS: &[(Space, Component, Component, Component, Space, Component, Component, Component)] = &[
            (S::Srgb, 0.8235294117647058, 0.4117647058823529, 0.11764705882352941, S::Srgb, 0.8235294117647058, 0.4117647058823529, 0.11764705882352941),
            (S::Srgb, 0.8235294117647058, 0.4117647058823529, 0.11764705882352941, S::Hsl, 24.999999999999996, 0.7499999999999999, 0.4705882352941176),
            (S::Srgb, 0.8235294117647058, 0.4117647058823529, 0.11764705882352941, S::Hwb, 24.999999999999996, 0.11764705882352958, 0.1764705882352942),
            (S::Srgb, 0.8235294117647058, 0.4117647058823529, 0.11764705882352941, S::Lab, 56.629300221279735, 39.237080198427755, 57.553769167682276),
            (S::Srgb, 0.8235294117647058, 0.4117647058823529, 0.11764705882352941, S::Lch, 56.629300221279735, 69.65619001858131, 55.7159271467267),
            (S::Srgb, 0.8235294117647058, 0.4117647058823529, 0.11764705882352941, S::Oklab, 0.6343984169310191, 0.09907390956414186, 0.11919315955467824),
            (S::Srgb, 0.8235294117647058, 0.4117647058823529, 0.11764705882352941, S::Oklch, 0.6343984169310191, 0.1549924154304034, 50.2664830831572),
            (S::Srgb, 0.8235294117647058, 0.4117647058823529, 0.11764705882352941, S::SrgbLinear, 0.6444796819705821, 0.14126329114027164, 0.012983032342173012),
            (S::Srgb, 0.8235294117647058, 0.4117647058823529, 0.11764705882352941, S::DisplayP3, 0.7705690267832033, 0.43401475070082135, 0.19984925850989144),
            (S::Srgb, 0.8235294117647058, 0.4117647058823529, 0.11764705882352941, S::A98Rgb, 0.7304052382069708, 0.4106884073067314, 0.16200485120539163),
            (S::Srgb, 0.8235294117647058, 0.4117647058823529, 0.11764705882352941, S::ProPhotoRgb, 0.5923111912088956, 0.39414857530840797, 0.1642862968632397),
            (S::Srgb, 0.8235294117647058, 0.4117647058823529, 0.11764705882352941, S::Rec2020, 0.6692659821033201, 0.4019004579259662, 0.14271566623012638),
            (S::Srgb, 0.8235294117647058, 0.4117647058823529, 0.11764705882352941, S::XyzD50, 0.3373008675302083, 0.2454491947638009, 0.0319588705314679),
            (S::Srgb, 0.8235294117647058, 0.4117647058823529, 0.11764705882352941, S::XyzD65, 0.31863421971306805, 0.23900587532696937, 0.041636956453517074),
            (S::Hsl, 24.999999999999996, 0.7499999999999999, 0.4705882352941176, S::Srgb, 0.8235294117647057, 0.4117647058823531, 0.11764705882352944),
            (S::Hsl, 24.999999999999996, 0.7499999999999999, 0.4705882352941176, S::Hsl, 24.999999999999996, 0.7499999999999999, 0.4705882352941176),
            (S::Hsl, 24.999999999999996, 0.7499999999999999, 0.4705882352941176, S::Hwb, 24.999999999999996, 0.11764705882352958, 0.1764705882352942),
            (S::Hsl, 24.999999999999996, 0.7499999999999999, 0.4705882352941176, S::Lab, 56.62930022127975, 39.2370801984277, 57.55376916768229),
            (S::Hsl, 24.999999999999996, 0.7499999999999999, 0.4705882352941176, S::Lch, 56.62930022127975, 69.65619001858128, 55.7159271467267),
            (S::Hsl, 24.999999999999996, 0.7499999999999999, 0.4705882352941176, S::Oklab, 0.6343984169310191, 0.09907390956414164, 0.11919315955467835),
            (S::Hsl, 24.999999999999996, 0.7499999999999999, 0.4705882352941176, S::Oklch, 0.6343984169310191, 0.15499241543040332, 50.26648308315731),
            (S::Hsl, 24.999999999999996, 0.7499999999999999, 0.4705882352941176, S::SrgbLinear, 0.6444796819705819, 0.14126329114027178, 0.012983032342173018),
            (S::Hsl, 24.999999999999996, 0.7499999999999999, 0.4705882352941176, S::DisplayP3, 0.7705690267832032, 0.43401475070082157, 0.19984925850989155),
            (S::Hsl, 24.999999999999996, 0.7499999999999999, 0.4705882352941176, S::A98Rgb, 0.7304052382069708, 0.41068840730673156, 0.1620048512053917),
            (S::Hsl, 24.999999999999996, 0.7499999999999999, 0.4705882352941176, S::ProPhotoRgb, 0.5923111912088955, 0.3941485753084081, 0.16428629686323973),
            (S::Hsl, 24.999999999999996, 0.7499999999999999, 0.4705882352941176, S::Rec2020, 0.6692659821033199, 0.4019004579259663, 0.1427156662301264),
            (S::Hsl, 24.999999999999996, 0.7499999999999999, 0.4705882352941176, S::XyzD50, 0.33730086753020827, 0.24544919476380095, 0.03195887053146791),
            (S::Hsl, 24.999999999999996, 0.7499999999999999, 0.4705882352941176, S::XyzD65, 0.318634219713068, 0.23900587532696943, 0.041636956453517095),
            (S::Hwb, 24.999999999999996, 0.11764705882352958, 0.1764705882352942, S::Srgb, 0.8235294117647058, 0.4117647058823532, 0.1176470588235296),
            (S::Hwb, 24.999999999999996, 0.11764705882352958, 0.1764705882352942, S::Hsl, 24.999999999999996, 0.7499999999999997, 0.4705882352941177),
            (S::Hwb, 24.999999999999996, 0.11764705882352958, 0.1764705882352942, S::Hwb, 24.999999999999996, 0.11764705882352958, 0.1764705882352942),
            (S::Hwb, 24.999999999999996, 0.11764705882352958, 0.1764705882352942, S::Lab, 56.62930022127976, 39.2370801984277, 57.553769167682276),
            (S::Hwb, 24.999999999999996, 0.11764705882352958, 0.1764705882352942, S::Lch, 56.62930022127976, 69.65619001858127, 55.7159271467267),
            (S::Hwb, 24.999999999999996, 0.11764705882352958, 0.1764705882352942, S::Oklab, 0.6343984169310193, 0.0990739095641417, 0.1191931595546783),
            (S::Hwb, 24.999999999999996, 0.11764705882352958, 0.1764705882352942, S::Oklch, 0.6343984169310193, 0.15499241543040332, 50.266483083157254),
            (S::Hwb, 24.999999999999996, 0.11764705882352958, 0.1764705882352942, S::SrgbLinear, 0.6444796819705821, 0.14126329114027186, 0.012983032342173044),
            (S::Hwb, 24.999999999999996, 0.11764705882352958, 0.1764705882352942, S::DisplayP3, 0.7705690267832033, 0.4340147507008217, 0.19984925850989166),
            (S::Hwb, 24.999999999999996, 0.11764705882352958, 0.1764705882352942, S::A98Rgb, 0.7304052382069709, 0.41068840730673173, 0.16200485120539182),
            (S::Hwb, 24.999999999999996, 0.11764705882352958, 0.1764705882352942, S::ProPhotoRgb, 0.5923111912088956, 0.39414857530840824, 0.16428629686323984),
            (S::Hwb, 24.999999999999996, 0.11764705882352958, 0.1764705882352942, S::Rec2020, 0.6692659821033201, 0.4019004579259664, 0.14271566623012652),
            (S::Hwb, 24.999999999999996, 0.11764705882352958, 0.1764705882352942, S::XyzD50, 0.3373008675302084, 0.24544919476380106, 0.03195887053146795),
            (S::Hwb, 24.999999999999996, 0.11764705882352958, 0.1764705882352942, S::XyzD65, 0.3186342197130681, 0.23900587532696954, 0.041636956453517136),
            (S::Lab, 56.629300221279735, 39.237080198427755, 57.553769167682276, S::Srgb, 0.8235293667937971, 0.4117648008848335, 0.11764679916835688),
            (S::Lab, 56.629300221279735, 39.237080198427755, 57.553769167682276, S::Hsl, 25.00002254249265, 0.7500004708510911, 0.470588082981077),
            (S::Lab, 56.629300221279735, 39.237080198427755, 57.553769167682276, S::Hwb, 25.00002254249265, 0.11764679916835703, 0.1764706332062029),
            (S::Lab, 56.629300221279735, 39.237080198427755, 57.553769167682276, S::Lab, 56.629300221279735, 39.237080198427755, 57.553769167682276),
            (S::Lab, 56.629300221279735, 39.237080198427755, 57.553769167682276, S::Lch, 56.629300221279735, 69.65619001858131, 55.7159271467267),
            (S::Lab, 56.629300221279735, 39.237080198427755, 57.553769167682276, S::Oklab, 0.6343984348385202, 0.09907384705525332, 0.1191931975660081),
            (S::Lab, 56.629300221279735, 39.237080198427755, 57.553769167682276, S::Oklch, 0.6343984348385202, 0.15499240470531828, 50.2665098354845),
            (S::Lab, 56.629300221279735, 39.237080198427755, 57.553769167682276, S::SrgbLinear, 0.6444796027941705, 0.14126336014479485, 0.012982985479752393),
            (S::Lab, 56.629300221279735, 39.237080198427755, 57.553769167682276, S::DisplayP3, 0.7705689940236302, 0.4340148333627461, 0.19984913315200414),
            (S::Lab, 56.629300221279735, 39.237080198427755, 57.553769167682276, S::A98Rgb, 0.7304052137095183, 0.41068849852717837, 0.162004681423373),
            (S::Lab, 56.629300221279735, 39.237080198427755, 57.553769167682276, S::ProPhotoRgb, 0.5923111912088955, 0.39414857530840786, 0.16428629686323967),
            (S::Lab, 56.629300221279735, 39.237080198427755, 57.553769167682276, S::Rec2020, 0.6692659598982287, 0.40190053214552635, 0.1427155492418532),
            (S::Lab, 56.629300221279735, 39.237080198427755, 57.553769167682276, S::XyzD50, 0.33730086753020827, 0.2454491947638008, 0.03195887053146789),
            (S::Lab, 56.629300221279735, 39.237080198427755, 57.553769167682276, S::XyzD65, 0.3186342032786145, 0.23900590445774295, 0.04163691860371362),
            (S::Lch, 56.629300221279735, 69.65619001858131, 55.7159271467267, S::Srgb, 0.8235293667937971, 0.4117648008848335, 0.1176467991683568),
            (S::Lch, 56.629300221279735, 69.65619001858131, 55.7159271467267, S::Hsl, 25.000022542492655, 0.7500004708510914, 0.4705880829810769),
            (S::Lch, 56.629300221279735, 69.65619001858131, 55.7159271467267, S::Hwb, 25.000022542492655, 0.1176467991683568, 0.1764706332062029),
            (S::Lch, 56.629300221279735, 69.65619001858131, 55.7159271467267, S::Lab, 56.629300221279735, 39.23708019842774, 57.55376916768229),
            (S::Lch, 56.629300221279735, 69.65619001858131, 55.7159271467267, S::Lch, 56.629300221279735, 69.65619001858131, 55.7159271467267),
            (S::Lch, 56.629300221279735, 69.65619001858131, 55.7159271467267, S::Oklab, 0.6343984348385202, 0.0990738470552533, 0.1191931975660081),
            (S::Lch, 56.629300221279735, 69.65619001858131, 55.7159271467267, S::Oklch, 0.6343984348385202, 0.15499240470531828, 50.2665098354845),
            (S::Lch, 56.629300221279735, 69.65619001858131, 55.7159271467267, S::SrgbLinear, 0.6444796027941705, 0.14126336014479485, 0.01298298547975238),
            (S::Lch, 56.629300221279735, 69.65619001858131, 55.7159271467267, S::DisplayP3, 0.7705689940236302, 0.4340148333627461, 0.1998491331520041),
            (S::Lch, 56.629300221279735, 69.65619001858131, 55.7159271467267, S::A98Rgb, 0.7304052137095183, 0.41068849852717837, 0.16200468142337293),
            (S::Lch, 56.629300221279735, 69.65619001858131, 55.7159271467267, S::ProPhotoRgb, 0.5923111912088955, 0.39414857530840786, 0.16428629686323964),
            (S::Lch, 56.629300221279735, 69.65619001858131, 55.7159271467267, S::Rec2020, 0.6692659598982287, 0.40190053214552635, 0.14271554924185317),
            (S::Lch, 56.629300221279735, 69.65619001858131, 55.7159271467267, S::XyzD50, 0.33730086753020827, 0.2454491947638008, 0.03195887053146788),
            (S::Lch, 56.629300221279735, 69.65619001858131, 55.7159271467267, S::XyzD65, 0.3186342032786145, 0.23900590445774295, 0.04163691860371361),
            (S::Oklab, 0.6343984169310191, 0.09907390956414186, 0.11919315955467824, S::Srgb, 0.8235294117647057, 0.411764705882353, 0.1176470588235296),
            (S::Oklab, 0.6343984169310191, 0.09907390956414186, 0.11919315955467824, S::Hsl, 24.999999999999996, 0.7499999999999997, 0.4705882352941176),
            (S::Oklab, 0.6343984169310191, 0.09907390956414186, 0.11919315955467824, S::Hwb, 24.999999999999996, 0.11764705882352955, 0.17647058823529435),
            (S::Oklab, 0.6343984169310191, 0.09907390956414186, 0.11919315955467824, S::Lab, 56.62930022127975, 39.2370801984277, 57.553769167682276),
            (S::Oklab, 0.6343984169310191, 0.09907390956414186, 0.11919315955467824, S::Lch, 56.62930022127975, 69.65619001858127, 55.7159271467267),
            (S::Oklab, 0.6343984169310191, 0.09907390956414186, 0.11919315955467824, S::Oklab, 0.6343984169310191, 0.09907390956414186, 0.11919315955467824),
            (S::Oklab, 0.6343984169310191, 0.09907390956414186, 0.11919315955467824, S::Oklch, 0.6343984169310191, 0.1549924154304034, 50.2664830831572),
            (S::Oklab, 0.6343984169310191, 0.09907390956414186, 0.11919315955467824, S::SrgbLinear, 0.6444796819705819, 0.1412632911402717, 0.012983032342173045),
            (S::Oklab, 0.6343984169310191, 0.09907390956414186, 0.11919315955467824, S::DisplayP3, 0.7705690267832032, 0.43401475070082157, 0.19984925850989155),
            (S::Oklab, 0.6343984169310191, 0.09907390956414186, 0.11919315955467824, S::A98Rgb, 0.7304052382069707, 0.41068840730673156, 0.16200485120539176),
            (S::Oklab, 0.6343984169310191, 0.09907390956414186, 0.11919315955467824, S::ProPhotoRgb, 0.5923111912088955, 0.3941485753084081, 0.16428629686323976),
            (S::Oklab, 0.6343984169310191, 0.09907390956414186, 0.11919315955467824, S::Rec2020, 0.6692659821033199, 0.4019004579259663, 0.14271566623012644),
            (S::Oklab, 0.6343984169310191, 0.09907390956414186, 0.11919315955467824, S::XyzD50, 0.3373008675302082, 0.24544919476380092, 0.031958870531467926),
            (S::Oklab, 0.6343984169310191, 0.09907390956414186, 0.11919315955467824, S::XyzD65, 0.31863421971306793, 0.2390058753269694, 0.0416369564535171),
            (S::Oklch, 0.6343984169310191, 0.1549924154304034, 50.2664830831572, S::Srgb, 0.8235294117647057, 0.411764705882353, 0.1176470588235296),
            (S::Oklch, 0.6343984169310191, 0.1549924154304034, 50.2664830831572, S::Hsl, 24.999999999999996, 0.7499999999999997, 0.4705882352941176),
            (S::Oklch, 0.6343984169310191, 0.1549924154304034, 50.2664830831572, S::Hwb, 24.999999999999996, 0.11764705882352955, 0.17647058823529435),
            (S::Oklch, 0.6343984169310191, 0.1549924154304034, 50.2664830831572, S::Lab, 56.62930022127975, 39.2370801984277, 57.553769167682276),
            (S::Oklch, 0.6343984169310191, 0.1549924154304034, 50.2664830831572, S::Lch, 56.62930022127975, 69.65619001858127, 55.7159271467267),
            (S::Oklch, 0.6343984169310191, 0.1549924154304034, 50.2664830831572, S::Oklab, 0.6343984169310191, 0.09907390956414192, 0.11919315955467823),
            (S::Oklch, 0.6343984169310191, 0.1549924154304034, 50.2664830831572, S::Oklch, 0.6343984169310191, 0.1549924154304034, 50.2664830831572),
            (S::Oklch, 0.6343984169310191, 0.1549924154304034, 50.2664830831572, S::SrgbLinear, 0.6444796819705819, 0.1412632911402717, 0.012983032342173045),
            (S::Oklch, 0.6343984169310191, 0.1549924154304034, 50.2664830831572, S::DisplayP3, 0.7705690267832032, 0.43401475070082157, 0.19984925850989155),
            (S::Oklch, 0.6343984169310191, 0.1549924154304034, 50.2664830831572, S::A98Rgb, 0.7304052382069707, 0.41068840730673156, 0.16200485120539176),
            (S::Oklch, 0.6343984169310191, 0.1549924154304034, 50.2664830831572, S::ProPhotoRgb, 0.5923111912088955, 0.3941485753084081, 0.16428629686323976),
            (S::Oklch, 0.6343984169310191, 0.1549924154304034, 50.2664830831572, S::Rec2020, 0.6692659821033199, 0.4019004579259663, 0.14271566623012644),
            (S::Oklch, 0.6343984169310191, 0.1549924154304034, 50.2664830831572, S::XyzD50, 0.3373008675302082, 0.24544919476380092, 0.031958870531467926),
            (S::Oklch, 0.6343984169310191, 0.1549924154304034, 50.2664830831572, S::XyzD65, 0.31863421971306793, 0.2390058753269694, 0.0416369564535171),
            (S::SrgbLinear, 0.6444796819705821, 0.14126329114027164, 0.012983032342173012, S::Srgb, 0.8235294117647058, 0.4117647058823529, 0.11764705882352941),
            (S::SrgbLinear, 0.6444796819705821, 0.14126329114027164, 0.012983032342173012, S::Hsl, 24.999999999999996, 0.7499999999999999, 0.4705882352941176),
            (S::SrgbLinear, 0.6444796819705821, 0.14126329114027164, 0.012983032342173012, S::Hwb, 24.999999999999996, 0.11764705882352958, 0.1764705882352942),
            (S::SrgbLinear, 0.6444796819705821, 0.14126329114027164, 0.012983032342173012, S::Lab, 56.629300221279735, 39.237080198427755, 57.553769167682276),
            (S::SrgbLinear, 0.6444796819705821, 0.14126329114027164, 0.012983032342173012, S::Lch, 56.629300221279735, 69.65619001858131, 55.7159271467267),
            (S::SrgbLinear, 0.6444796819705821, 0.14126329114027164, 0.012983032342173012, S::Oklab, 0.6343984169310191, 0.09907390956414186, 0.11919315955467824),
            (S::SrgbLinear, 0.6444796819705821, 0.14126329114027164, 0.012983032342173012, S::Oklch, 0.6343984169310191, 0.1549924154304034, 50.2664830831572),
            (S::SrgbLinear, 0.6444796819705821, 0.14126329114027164, 0.012983032342173012, S::SrgbLinear, 0.6444796819705821, 0.14126329114027164, 0.012983032342173012),
            (S::SrgbLinear, 0.6444796819705821, 0.14126329114027164, 0.012983032342173012, S::DisplayP3, 0.7705690267832033, 0.43401475070082135, 0.19984925850989144),
            (S::SrgbLinear, 0.6444796819705821, 0.14126329114027164, 0.012983032342173012, S::A98Rgb, 0.7304052382069708, 0.4106884073067314, 0.16200485120539163),
            (S::SrgbLinear, 0.6444796819705821, 0.14126329114027164, 0.012983032342173012, S::ProPhotoRgb, 0.5923111912088956, 0.39414857530840797, 0.1642862968632397),
            (S::SrgbLinear, 0.6444796819705821, 0.14126329114027164, 0.012983032342173012, S::Rec2020, 0.6692659821033201, 0.4019004579259662, 0.14271566623012638),
            (S::SrgbLinear, 0.6444796819705821, 0.14126329114027164, 0.012983032342173012, S::XyzD50, 0.3373008675302083, 0.2454491947638009, 0.0319588705314679),
            (S::SrgbLinear, 0.6444796819705821, 0.14126329114027164, 0.012983032342173012, S::XyzD65, 0.31863421971306805, 0.23900587532696937, 0.041636956453517074),
            (S::DisplayP3, 0.7705690267832033, 0.43401475070082135, 0.19984925850989144, S::Srgb, 0.8235294117647058, 0.4117647058823529, 0.1176470588235295),
            (S::DisplayP3, 0.7705690267832033, 0.43401475070082135, 0.19984925850989144, S::Hsl, 24.999999999999993, 0.7499999999999999, 0.4705882352941176),
            (S::DisplayP3, 0.7705690267832033, 0.43401475070082135, 0.19984925850989144, S::Hwb, 24.999999999999993, 0.11764705882352958, 0.1764705882352942),
            (S::DisplayP3, 0.7705690267832033, 0.43401475070082135, 0.19984925850989144, S::Lab, 56.629300221279735, 39.237080198427755, 57.55376916768227),
            (S::DisplayP3, 0.7705690267832033, 0.43401475070082135, 0.19984925850989144, S::Lch, 56.629300221279735, 69.65619001858131, 55.7159271467267),
            (S::DisplayP3, 0.7705690267832033, 0.43401475070082135, 0.19984925850989144, S::Oklab, 0.6343984169310191, 0.09907390956414183, 0.1191931595546783),
            (S::DisplayP3, 0.7705690267832033, 0.43401475070082135, 0.19984925850989144, S::Oklch, 0.6343984169310191, 0.1549924154304034, 50.266483083157254),
            (S::DisplayP3, 0.7705690267832033, 0.43401475070082135, 0.19984925850989144, S::SrgbLinear, 0.6444796819705821, 0.14126329114027164, 0.012983032342173028),
            (S::DisplayP3, 0.7705690267832033, 0.43401475070082135, 0.19984925850989144, S::DisplayP3, 0.7705690267832033, 0.43401475070082135, 0.19984925850989144),
            (S::DisplayP3, 0.7705690267832033, 0.43401475070082135, 0.19984925850989144, S::A98Rgb, 0.7304052382069708, 0.4106884073067315, 0.16200485120539165),
            (S::DisplayP3, 0.7705690267832033, 0.43401475070082135, 0.19984925850989144, S::ProPhotoRgb, 0.5923111912088955, 0.39414857530840797, 0.1642862968632397),
            (S::DisplayP3, 0.7705690267832033, 0.43401475070082135, 0.19984925850989144, S::Rec2020, 0.6692659821033201, 0.4019004579259662, 0.1427156662301264),
            (S::DisplayP3, 0.7705690267832033, 0.43401475070082135, 0.19984925850989144, S::XyzD50, 0.33730086753020827, 0.2454491947638009, 0.031958870531467905),
            (S::DisplayP3, 0.7705690267832033, 0.43401475070082135, 0.19984925850989144, S::XyzD65, 0.318634219713068, 0.23900587532696937, 0.04163695645351708),
            (S::A98Rgb, 0.7304052382069708, 0.4106884073067314, 0.16200485120539163, S::Srgb, 0.8235294117647058, 0.41176470588235287, 0.11764705882352941),
            (S::A98Rgb, 0.7304052382069708, 0.4106884073067314, 0.16200485120539163, S::Hsl, 24.999999999999996, 0.7499999999999999, 0.4705882352941176),
            (S::A98Rgb, 0.7304052382069708, 0.4106884073067314, 0.16200485120539163, S::Hwb, 24.999999999999996, 0.11764705882352958, 0.1764705882352942),
            (S::A98Rgb, 0.7304052382069708, 0.4106884073067314, 0.16200485120539163, S::Lab, 56.629300221279735, 39.237080198427755, 57.553769167682276),
            (S::A98Rgb, 0.7304052382069708, 0.4106884073067314, 0.16200485120539163, S::Lch, 56.629300221279735, 69.65619001858131, 55.7159271467267),
            (S::A98Rgb, 0.7304052382069708, 0.4106884073067314, 0.16200485120539163, S::Oklab, 0.6343984169310191, 0.09907390956414183, 0.11919315955467835),
            (S::A98Rgb, 0.7304052382069708, 0.4106884073067314, 0.16200485120539163, S::Oklch, 0.6343984169310191, 0.15499241543040346, 50.266483083157254),
            (S::A98Rgb, 0.7304052382069708, 0.4106884073067314, 0.16200485120539163, S::SrgbLinear, 0.6444796819705821, 0.14126329114027159, 0.01298303234217301),
            (S::A98Rgb, 0.7304052382069708, 0.4106884073067314, 0.16200485120539163, S::DisplayP3, 0.7705690267832032, 0.43401475070082135, 0.19984925850989144),
            (S::A98Rgb, 0.7304052382069708, 0.4106884073067314, 0.16200485120539163, S::A98Rgb, 0.7304052382069708, 0.4106884073067314, 0.16200485120539163),
            (S::A98Rgb, 0.7304052382069708, 0.4106884073067314, 0.16200485120539163, S::ProPhotoRgb, 0.5923111912088955, 0.39414857530840797, 0.16428629686323967),
            (S::A98Rgb, 0.7304052382069708, 0.4106884073067314, 0.16200485120539163, S::Rec2020, 0.6692659821033199, 0.40190045792596607, 0.14271566623012635),
            (S::A98Rgb, 0.7304052382069708, 0.4106884073067314, 0.16200485120539163, S::XyzD50, 0.3373008675302082, 0.24544919476380084, 0.03195887053146789),
            (S::A98Rgb, 0.7304052382069708, 0.4106884073067314, 0.16200485120539163, S::XyzD65, 0.31863421971306793, 0.23900587532696932, 0.04163695645351706),
            (S::ProPhotoRgb, 0.5923111912088956, 0.3941485753084079, 0.16428629686323967, S::Srgb, 0.8235293667937972, 0.4117648008848335, 0.11764679916835685),
            (S::ProPhotoRgb, 0.5923111912088956, 0.3941485753084079, 0.16428629686323967, S::Hsl, 25.00002254249265, 0.7500004708510911, 0.470588082981077),
            (S::ProPhotoRgb, 0.5923111912088956, 0.3941485753084079, 0.16428629686323967, S::Hwb, 25.00002254249265, 0.11764679916835703, 0.1764706332062029),
            (S::ProPhotoRgb, 0.5923111912088956, 0.3941485753084079, 0.16428629686323967, S::Lab, 56.629300221279735, 39.23708019842781, 57.55376916768229),
            (S::ProPhotoRgb, 0.5923111912088956, 0.3941485753084079, 0.16428629686323967, S::Lch, 56.629300221279735, 69.65619001858136, 55.71592714672664),
            (S::ProPhotoRgb, 0.5923111912088956, 0.3941485753084079, 0.16428629686323967, S::Oklab, 0.6343984348385203, 0.09907384705525332, 0.1191931975660081),
            (S::ProPhotoRgb, 0.5923111912088956, 0.3941485753084079, 0.16428629686323967, S::Oklch, 0.6343984348385203, 0.15499240470531828, 50.2665098354845),
            (S::ProPhotoRgb, 0.5923111912088956, 0.3941485753084079, 0.16428629686323967, S::SrgbLinear, 0.6444796027941708, 0.14126336014479485, 0.012982985479752386),
            (S::ProPhotoRgb, 0.5923111912088956, 0.3941485753084079, 0.16428629686323967, S::DisplayP3, 0.7705689940236304, 0.43401483336274604, 0.19984913315200414),
            (S::ProPhotoRgb, 0.5923111912088956, 0.3941485753084079, 0.16428629686323967, S::A98Rgb, 0.7304052137095185, 0.41068849852717837, 0.16200468142337293),
            (S::ProPhotoRgb, 0.5923111912088956, 0.3941485753084079, 0.16428629686323967, S::ProPhotoRgb, 0.5923111912088956, 0.3941485753084079, 0.16428629686323967),
            (S::ProPhotoRgb, 0.5923111912088956, 0.3941485753084079, 0.16428629686323967, S::Rec2020, 0.669265959898229, 0.40190053214552646, 0.14271554924185317),
            (S::ProPhotoRgb, 0.5923111912088956, 0.3941485753084079, 0.16428629686323967, S::XyzD50, 0.3373008675302084, 0.24544919476380087, 0.031958870531467884),
            (S::ProPhotoRgb, 0.5923111912088956, 0.3941485753084079, 0.16428629686323967, S::XyzD65, 0.31863420327861464, 0.239005904457743, 0.041636918603713616),
            (S::Rec2020, 0.6692659821033201, 0.4019004579259662, 0.14271566623012638, S::Srgb, 0.8235294117647062, 0.4117647058823527, 0.11764705882352897),
            (S::Rec2020, 0.6692659821033201, 0.4019004579259662, 0.14271566623012638, S::Hsl, 24.999999999999993, 0.7500000000000009, 0.4705882352941176),
            (S::Rec2020, 0.6692659821033201, 0.4019004579259662, 0.14271566623012638, S::Hwb, 24.999999999999993, 0.11764705882352905, 0.17647058823529377),
            (S::Rec2020, 0.6692659821033201, 0.4019004579259662, 0.14271566623012638, S::Lab, 56.62930022127975, 39.237080198427755, 57.55376916768235),
            (S::Rec2020, 0.6692659821033201, 0.4019004579259662, 0.14271566623012638, S::Lch, 56.62930022127975, 69.65619001858137, 55.7159271467267),
            (S::Rec2020, 0.6692659821033201, 0.4019004579259662, 0.14271566623012638, S::Oklab, 0.6343984169310192, 0.09907390956414205, 0.11919315955467846),
            (S::Rec2020, 0.6692659821033201, 0.4019004579259662, 0.14271566623012638, S::Oklch, 0.6343984169310192, 0.15499241543040368, 50.2664830831572),
            (S::Rec2020, 0.6692659821033201, 0.4019004579259662, 0.14271566623012638, S::SrgbLinear, 0.6444796819705828, 0.14126329114027147, 0.012983032342172931),
            (S::Rec2020, 0.6692659821033201, 0.4019004579259662, 0.14271566623012638, S::DisplayP3, 0.7705690267832035, 0.43401475070082135, 0.19984925850989121),
            (S::Rec2020, 0.6692659821033201, 0.4019004579259662, 0.14271566623012638, S::A98Rgb, 0.7304052382069711, 0.4106884073067313, 0.16200485120539124),
            (S::Rec2020, 0.6692659821033201, 0.4019004579259662, 0.14271566623012638, S::ProPhotoRgb, 0.5923111912088957, 0.39414857530840797, 0.16428629686323948),
            (S::Rec2020, 0.6692659821033201, 0.4019004579259662, 0.14271566623012638, S::Rec2020, 0.6692659821033201, 0.4019004579259662, 0.14271566623012638),
            (S::Rec2020, 0.6692659821033201, 0.4019004579259662, 0.14271566623012638, S::XyzD50, 0.3373008675302085, 0.24544919476380095, 0.03195887053146783),
            (S::Rec2020, 0.6692659821033201, 0.4019004579259662, 0.14271566623012638, S::XyzD65, 0.3186342197130682, 0.23900587532696943, 0.041636956453516984),
            (S::XyzD50, 0.3373008675302083, 0.2454491947638009, 0.0319588705314679, S::Srgb, 0.8235293667937971, 0.4117648008848337, 0.11764679916835691),
            (S::XyzD50, 0.3373008675302083, 0.2454491947638009, 0.0319588705314679, S::Hsl, 25.000022542492665, 0.750000470851091, 0.470588082981077),
            (S::XyzD50, 0.3373008675302083, 0.2454491947638009, 0.0319588705314679, S::Hwb, 25.000022542492665, 0.11764679916835703, 0.1764706332062029),
            (S::XyzD50, 0.3373008675302083, 0.2454491947638009, 0.0319588705314679, S::Lab, 56.629300221279735, 39.237080198427755, 57.553769167682276),
            (S::XyzD50, 0.3373008675302083, 0.2454491947638009, 0.0319588705314679, S::Lch, 56.629300221279735, 69.65619001858131, 55.7159271467267),
            (S::XyzD50, 0.3373008675302083, 0.2454491947638009, 0.0319588705314679, S::Oklab, 0.6343984348385203, 0.09907384705525335, 0.11919319756600805),
            (S::XyzD50, 0.3373008675302083, 0.2454491947638009, 0.0319588705314679, S::Oklch, 0.6343984348385203, 0.15499240470531825, 50.2665098354845),
            (S::XyzD50, 0.3373008675302083, 0.2454491947638009, 0.0319588705314679, S::SrgbLinear, 0.6444796027941705, 0.14126336014479496, 0.012982985479752397),
            (S::XyzD50, 0.3373008675302083, 0.2454491947638009, 0.0319588705314679, S::DisplayP3, 0.7705689940236303, 0.43401483336274616, 0.1998491331520042),
            (S::XyzD50, 0.3373008675302083, 0.2454491947638009, 0.0319588705314679, S::A98Rgb, 0.7304052137095184, 0.4106884985271785, 0.162004681423373),
            (S::XyzD50, 0.3373008675302083, 0.2454491947638009, 0.0319588705314679, S::ProPhotoRgb, 0.5923111912088956, 0.39414857530840797, 0.1642862968632397),
            (S::XyzD50, 0.3373008675302083, 0.2454491947638009, 0.0319588705314679, S::Rec2020, 0.6692659598982288, 0.40190053214552657, 0.14271554924185323),
            (S::XyzD50, 0.3373008675302083, 0.2454491947638009, 0.0319588705314679, S::XyzD50, 0.3373008675302083, 0.2454491947638009, 0.0319588705314679),
            (S::XyzD50, 0.3373008675302083, 0.2454491947638009, 0.0319588705314679, S::XyzD65, 0.3186342032786146, 0.23900590445774303, 0.04163691860371364),
            (S::XyzD65, 0.31863421971306805, 0.23900587532696937, 0.041636956453517074, S::Srgb, 0.823529411764706, 0.41176470588235287, 0.11764705882352944),
            (S::XyzD65, 0.31863421971306805, 0.23900587532696937, 0.041636956453517074, S::Hsl, 24.999999999999993, 0.75, 0.4705882352941177),
            (S::XyzD65, 0.31863421971306805, 0.23900587532696937, 0.041636956453517074, S::Hwb, 24.999999999999993, 0.11764705882352935, 0.17647058823529405),
            (S::XyzD65, 0.31863421971306805, 0.23900587532696937, 0.041636956453517074, S::Lab, 56.629300221279735, 39.237080198427755, 57.553769167682276),
            (S::XyzD65, 0.31863421971306805, 0.23900587532696937, 0.041636956453517074, S::Lch, 56.629300221279735, 69.65619001858131, 55.7159271467267),
            (S::XyzD65, 0.31863421971306805, 0.23900587532696937, 0.041636956453517074, S::Oklab, 0.6343984169310191, 0.09907390956414186, 0.11919315955467824),
            (S::XyzD65, 0.31863421971306805, 0.23900587532696937, 0.041636956453517074, S::Oklch, 0.6343984169310191, 0.1549924154304034, 50.2664830831572),
            (S::XyzD65, 0.31863421971306805, 0.23900587532696937, 0.041636956453517074, S::SrgbLinear, 0.6444796819705824, 0.14126329114027159, 0.012983032342173018),
            (S::XyzD65, 0.31863421971306805, 0.23900587532696937, 0.041636956453517074, S::DisplayP3, 0.7705690267832033, 0.43401475070082135, 0.19984925850989144),
            (S::XyzD65, 0.31863421971306805, 0.23900587532696937, 0.041636956453517074, S::A98Rgb, 0.7304052382069708, 0.4106884073067314, 0.16200485120539163),
            (S::XyzD65, 0.31863421971306805, 0.23900587532696937, 0.041636956453517074, S::ProPhotoRgb, 0.5923111912088956, 0.39414857530840797, 0.1642862968632397),
            (S::XyzD65, 0.31863421971306805, 0.23900587532696937, 0.041636956453517074, S::Rec2020, 0.6692659821033201, 0.4019004579259662, 0.14271566623012638),
            (S::XyzD65, 0.31863421971306805, 0.23900587532696937, 0.041636956453517074, S::XyzD50, 0.3373008675302083, 0.2454491947638009, 0.0319588705314679),
            (S::XyzD65, 0.31863421971306805, 0.23900587532696937, 0.041636956453517074, S::XyzD65, 0.31863421971306805, 0.23900587532696937, 0.041636956453517074),
        ];

        macro_rules! assert_component_eq {
            ($actual:expr,$expected:expr,$c:expr,$source_space:expr,$dest_space:expr) => {{
                assert!(
                    ($actual - $expected).abs() <= Component::EPSILON * 1e3,
                    "{:?} -> {:?} component {}: {} != {}",
                    $source_space,
                    $dest_space,
                    $c,
                    $actual,
                    $expected,
                )
            }};
        }

        for &(source_space, source_0, source_1, source_2, dest_space, dest_0, dest_1, dest_2) in
            TESTS
        {
            let source = Color::new(source_space, source_0, source_1, source_2, 1.0);
            let dest = source.to_space(dest_space);
            assert_component_eq!(dest.components.0, dest_0, 0, source_space, dest_space);
            assert_component_eq!(dest.components.1, dest_1, 1, source_space, dest_space);
            assert_component_eq!(dest.components.2, dest_2, 2, source_space, dest_space);
        }
    }
}
